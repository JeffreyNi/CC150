/**
 * This class implements code for questions in Chapter1, CC150
 */

import java.util.*;

public class Chapter1 {

    /**
     * 1.1 Implement an algorithm to determine if a string has all
     * unique characters. What if you can not use additional data 
     * structures?
     *
     * This method implements using extra space.
     *
     * Returns true if all characters in the string is unique. Returns
     * false otherwise.
     * @param str the string to be checked
     * @return true if all characters unique
     */
    public static boolean isUniqueChar1(String str) {
	boolean[] checker = new boolean[256];

	for (int i = 0; i < str.length(); i++) {
	    int cur = str.charAt(i);
	    if (checker[cur]) { return false; }
	    else              { checker[cur] = true; }
	}

	return true;
    }

    /**
     * Same question as above, in the condition that all characters in
     * the range of [a-z], implemented without extra space.
     */
    public static boolean isUniqueChar2(String str) {
	int checker = 0;
	for (int i = 0; i < str.length(); i++) {
	    int val = str.charAt(i) - 'a';
	    if ((checker & (1 << val)) > 0) { return false; }
	    else                            { checker |= (1 << val);}
	}

	return true;
    }


    /**
     * 1.2 Write code to reverse a C-Style String. (C-String means that)
     * "abcd" is represented as five characters, including the null character.)
     *
     * This method reverse a C-String.
     * @param the C-String to be reversed
     */
    public static void reverseCString(char[] chars) {
	int end = chars.length - 1;
	int start = 0;
	while (start < end) {
	    char tmp = chars[start];
	    chars[start++] = chars[end];
	    chars[end--] = tmp;
	}
    } 

    /**
     * Design an algorithm and write code to remove the duplicate characters 
     * in a string without using any additinal buffer. NOTE: one or two 
     * additional variables are fine. An extra copy of the array is not.
     *     
     * FOLLOW UP: Write the test cases for the method.
     */
    public static void removeDuplicates(char[] str) {
	if (str == null) {return;}

	int len = str.length;
	if (len < 2) {return;}

	int tail = 1;
	
	for(int i = 1; i < len; i++) {
	    int j;
	    for (j = 0; j < tail; j++) {
		if(str[j] == str[i]) { break; }
	    }
	    if (j == tail) {
		str[tail++] = str[i];
	    }
	}
	str[tail] = 0;
    }

    public static void main(String[] args) {
	String string = "aaabbb";
	char[] str = string.toCharArray();

	removeDuplicates(str);
	
	System.out.println(str);
    }

}